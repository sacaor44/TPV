package ctpv;

import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Isul
 */
public class CTPV extends javax.swing.JFrame {

    private ArrayList<InternalTPV> listaInternal;
    private int num;

    /**
     * Creates new form MasterTPV
     */
    public CTPV() {
        initComponents();
        //ImageIcon icono = new ImageIcon(getClass().getResource("/iconos/PC.png"));
        //setIconImage(icono.getImage());
        HiloServidor hs = new HiloServidor(this);
        hs.start();
        HiloClienteMonitor hcm = new HiloClienteMonitor();
        hcm.start();
        setExtendedState(MAXIMIZED_BOTH);

        listaInternal = new ArrayList<InternalTPV>();
        num = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Controlador TPV");

        panel.setLayout(new java.awt.GridLayout(2, 3));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CTPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CTPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CTPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CTPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CTPV().setVisible(true);
            }
        });
    }

    public int nuevoInternal() {
        num++;
        int puerto = 3330 + num;
        InternalTPV itpv = new InternalTPV(num);
        itpv.setTitle("Terminal " + num);
        listaInternal.add(itpv);
        itpv.setVisible(true);
        panel.add(itpv);

        panel.updateUI();
        panel.repaint();
        HiloComServidor hcs = new HiloComServidor(puerto, itpv);
        hcs.start();
        return num;
    }

    public void mostrarMsgITPV(int num) {
        InternalTPV itpv;
        for (int i = 0; i < listaInternal.size(); i++) {
            itpv = (InternalTPV) listaInternal.get(i);
            if (itpv.getNumITPV() == num) {
                itpv.setLblAviso("Servicio completado");
            }
        }
    }

    public void cerrarITPV(int num) {
        InternalTPV itpv;
        for (int i = 0; i < listaInternal.size(); i++) {
            itpv = (InternalTPV) listaInternal.get(i);
            if (itpv.getNumITPV() == num) {
                listaInternal.remove(i);

                //itpv.cerrar();
                panel.remove(itpv);
                panel.updateUI();
                panel.repaint();

            }
        }
    }

    public boolean lleno() {
        if (panel.getComponentCount() >= 6) {
            return true;
        } else {
            return false;
        }
    }

    public void cerrarInternal(int id) {
        InternalTPV itpv = (InternalTPV) listaInternal.get(id);
        itpv.cerrar();
    }

    public static void lanzarMensaje(String text) {
        JOptionPane.showMessageDialog(null, text);
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel panel;
    // End of variables declaration                   
}
